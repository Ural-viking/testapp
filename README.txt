Данный проект реализован, как тестовое задание в компанию Embedika.
Он представляет собой сервис справочника автомобилей с хранением в базе данных.
Используемые технологии: IntelliJ IDEA 2022.2.3, Java с его библиотеками, фреймворк Spring Boot, 
Postman для тестов отработки программы и база данных, в данном случае использовалась H2.

Реализовано все следующим образом.
Проект разбит на несколько пакетов: entity, repository, service, controller.

Класс Car - для него использовались аннотации @Data, @Getter, @Setter, @AllArgsConstructor,
@NoArgsConstructor, @Entity и @Table - прописали гет и сет методы для полей, создали 
конструкторы класса, также данный класс является сущностью,то есть для него будет создана 
таблица с именем "cars".

Интерфейс CarRepository - выполняет роль DAO в этом проекте.
имеет только один метод по поиску машины по полю объекта "registerSign".

Интерфейс CarService - описывает действия, производимые с нашим репозиторием.
В данном случае это минимальные API тестового задания:
- List<Car> findAll(); // вывести список всех машин;
- Car postCar(Car car); // добавление машины;
- void deleteCarById(Long id); // удаление машины по ид.

Класс CarServiceImpl, который имплементирует вышеуказанный интерфейс и переопределяет его методы.
	Метод public List<Car> findAll(). Достает весь список объектов и кидает лог в консоль IDEА, 
что произведен данный метод.
	Метод public Car postCar(Car car1). Сохраняет новый объект в БД. Сначала проверяет при помощи
метода репозитория есть ли данный номер в базе данных и, если его нет, то создает новый обьект с 
указанными параметрами и сохраняет его в БД, при этом кинув соответствующий лог в консоль IDEА.
В противном случае никаких действий не производится, в консоль уходит соответствующий лог, а также
исключение.
	Метод  public void deleteCarById(Long id). Удаляет машину по ее номеру id в базе данных.
Метод похож на предыдущий. Происходит проверка существования указанного id в БД и, 
если он присутствует - объект удаляется. В ином случае выводится лог в консоль и обрабатывается исключение.

Класс public class CarController. Обрабатывает CRUD запросы, которые мы будем ему посылать.

Итак - реализованы первые три пункта из минимального API.

Статистику системы сделал зеркально похожим. Способ, признаюсь простейший и, вероятно, не используется 
на практике, потому что все записи действии также поступают в отдельную БД, а это решение сомнительное.
Надеюсь, можно это спихнуть на неопытность.
Создал класс Action, с полями даты производимого действия и их описания. у него свой репозиторий без методов
ActionRepository, интерфейс сервиса ActionService с методом void saveLogOfAction(String state) 
для сохранения логов в БД и класс ActionServiceImpl, который имплементирует данный интерфейс и переопределяет вышеуказанный метод.
	В класс CarServiceImpl дополнительно ввел аннотацию @Autowired для ActionService. Также в каждый метод,
на каждое действие дописал логи, которые записываются в БД.

Тестирование производил в программе Postman. Принтскрины работы приложения приведены в Скриншоты.pdf.
Проект висит на гитхабе: https://github.com/Ural-viking/testapp

